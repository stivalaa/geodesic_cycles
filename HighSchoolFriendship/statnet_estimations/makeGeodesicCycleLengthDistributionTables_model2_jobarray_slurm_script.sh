#!/bin/bash

#SBATCH --job-name="geodesic_model2_jobarray"
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=2GB
#SBATCH --time=0-40:00:00
#SBATCH --output=geodesic_model2-%A_%a.out
#SBATCH --error=geodesic_model2-%A_%a.err
#SBATCH --array=1-100

# use submit_makeGeodesicCycleLengthDistributionTables_model2_jobs.sh
# to submit this job

uname -a >&2
echo Started at `date` >&2

echo SLURM_ARRAY_TASK_ID = ${SLURM_ARRAY_TASK_ID} >&2

module load python/3.9.0

CYPATHDIR=${HOME}/CYPATH
SCRIPTDIR=../../scripts
PATH=${SCRIPTDIR}:${PATH}:${CYPATHDIR}

inputdir=simulated/model2
outputfile=model2_geodesiccycletable_${SLURM_ARRAY_TASK_ID}.txt
# copy all subsequent stdout to $outputfile (uses bash process substitution)
exec > >(tee ${outputfile})

echo "# Generated by: $0 $*"
echo "# At: " `date`
echo "# On: " `uname -a`

echo "sim length count" # header line: simulated network num, cycle len, count
edgelistfile=${inputdir}/sim_model2_${SLURM_ARRAY_TASK_ID}_edgelist.txt
tmpfile=`mktemp`

# format of each input edgelist file is e.g. sim_model1_95_edgelist.txt
# so get number from filename
num=`echo "${edgelistfile}" | sed 's/.*sim_mode[a-z]*[0-9]*_\([0-9]*\)_edgelist[.]txt/\1/g'`

# convert to format for CYPATH in tmpfile
transgrh.pl < ${edgelistfile} > ${tmpfile}
    
## run CYPATH and filterCyclesGeodesic.py to get geodesic cycles and
## use  uses awk, sort, and uniq to get counts of each geodesic cycle length
## Note capital C on cypath to get chordless cycles only,
## since a geodesic cycle must be chordless. The "-, ," option sets the
## output delimiter to comma, and fgrep used to get only lines with comma,
## so that summary (cycle length counts) information is removed (there is 
## a q option documented to do this, but appears not to be implemented).
##
time output=`cypath C -, , ${tmpfile} - | fgrep , | filterCyclesGeodesic.py  ${edgelistfile}  | awk -F, '{print NF}' | sort -n | uniq -c | awk -vnum=$num '{print num, $2,$1}'`
if [ -z "$output" ]; then
    # if no geodesic cycles found, then put NA for count and len for this sim
    echo "${num} NA NA"
 else
    echo "${output}"
fi
rm ${tmpfile}

echo Ended at `date` >&2

